pipeline {
  agent {
    docker {
      image 'anushkafarkade/maven-jdk17-docker-cli:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  options {
    skipDefaultCheckout(true)
  }

  stages {

    stage('Clean Workspace') {
      steps {
        sh '''
          echo "[INFO] Fixing ownership and clearing workspace..."
          chown -R jenkins:jenkins /var/lib/jenkins/workspace || true
          find /var/lib/jenkins/workspace -type f -exec chmod 644 {} \\; || true
          find /var/lib/jenkins/workspace -type d -exec chmod 755 {} \\; || true
          rm -rf /var/lib/jenkins/workspace/CICD || true
        '''
      }
    }

    stage('Checkout') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config --global user.email "durveshkolhe81@gmail.com"
            git config --global user.name "durvesh"
            git clone https://$GITHUB_TOKEN@github.com/1durvesh/CICD.git
          '''
        }
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          cd CICD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.48.30.225:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd CICD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "anushkafarkade/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd CICD/java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "CICD"
        GIT_USER_NAME = "1durvesh"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('CICD') {
            sh '''
              echo "[INFO] Verifying Git environment..."
              git --version || (echo "Git is not installed in the container!" && exit 1)

              echo "[INFO] Verifying presence of .git directory..."
              ls -la .git || (echo ".git directory missing!" && exit 1)

              git config user.email "durveshkolhe81@gmail.com"
              git config user.name "durvesh"

              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}

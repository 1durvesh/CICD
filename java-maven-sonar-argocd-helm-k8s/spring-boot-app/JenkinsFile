pipeline {
    agent {
        docker {
            image 'anushkafarkade/maven-jdk17-docker-cli:latest'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    options {
        skipDefaultCheckout(true) // We're doing manual checkout inside the container
    }

    stages {
        stage('Clean Workspace') {
            steps {
                sh '''
                echo "[INFO] Cleaning workspace..."
                chown -R jenkins:jenkins /var/lib/jenkins/workspace || true
                find /var/lib/jenkins/workspace -type f -exec chmod 644 {} \\; || true
                find /var/lib/jenkins/workspace -type d -exec chmod 755 {} \\; || true
                rm -rf /var/lib/jenkins/workspace/CICD || true
                '''
            }
        }

        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                        echo "[INFO] Cloning repository inside container..."
                        git config --global user.email "durveshkolhe81@gmail.com"
                        git config --global user.name "durvesh"
                        git clone https://$GIT_USER:$GIT_PASS@github.com/1durvesh/CICD.git .
                    '''
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                sh 'pwd'
                sh 'ls -la'
                sh 'git status'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://56.228.30.148:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "anushkafarkade/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "CICD"
                GIT_USER_NAME = "1durvesh"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "[INFO] Updating deployment file and pushing to GitHub..."
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
    }
}
